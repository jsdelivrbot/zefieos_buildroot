#!/bin/bash
source /etc/zefie/core/dialogs

format_disk() {
	/sbin/make_ext4fs -L "${2}" -a "/${2}" "${3}" 2>>${LOGFILE} 1>>${LOGFILE}
}


logd() {
    printf '[%s] %s\n' "$(date "+%Y-%m-%d_%H:%M:%S.%N")" "$@" >> "${LOGFILE}"
}

logn() {
    printf '%s' "$@" > /dev/console
    logd "$@"
}

log() {
    printf '%s\n' "$@" > /dev/console
    logd "$@"
}

mount_usb() {
	logd "Searching for USB device at ${1}..."
	while [ ! -b "${1}" ]; do
	  sleep 1
	done;


	logd "Mounting USB Device ${1} to ${2}"
	mkdir -p "${2}" 2>>${LOGFILE} 1>>${LOGFILE}
	MOUNTOPTS=${3}
	if [ -z "${MOUNTOPTS}" ]; then
		MOUNTOPTS="ro"
	fi
	mount -o ${MOUNTOPTS} -t vfat "${1}" "${2}"
}

umount_dev() {
	logd "Unmounting device ${1}"
	umount "${1}" 2>>${LOGFILE} 1>>${LOGFILE}
}

verify_md5() {
	unset SRCMD5;
	unset DATMD5;
	if [ -f "${1}.md5" ]; then
		SRCMD5=$(cut -d' ' -f1 < "${1}.md5")
		DATMD5=$(md5sum "${1}" | cut -d' ' -f1)
		logd "Source MD5: ${SRCMD5}"
		logd "  Data MD5: ${DATMD5}"
		if [ "$SRCMD5" != "$DATMD5" ]; then
			if [ -z "${2}" ]; then
				logd "[BAD MD5] ${1}"
			fi
			echo 0;
			return 0;
		fi
		if [ -z "${2}" ]; then
			logd "[Good MD5] ${1}"
		fi
		echo 1;
		return 1;
	fi
	if [ -z "${2}" ]; then
		logd "[No MD5] ${1}"
	fi
	echo 2;
	return 2;
}

secure_erase_dev() {
	blkdiscard -v -o ${2} -l "${3}" -s "${1}" 2>>${LOGFILE} 1>>${LOGFILE}
}

restore_tar() {
	case "${1}" in
		"gz")
			cat ${2} | gzip -dc | tar ${TWRP_TAR_FLAGS} -C ${DESTMNT} 2>>${LOGFILE} 1>>${LOGFILE}
			;;
		"tar")
			cat ${2} | tar ${TWRP_TAR_FLAGS} -C ${DESTMNT} 2>>${LOGFILE} 1>>${LOGFILE}
			;;
	esac
}


write_image() {
	case "${1}" in
		"gz")
			gzip -dc "${2}" | dd of="${3}" bs=${BLOCKSIZE} 2>>${LOGFILE} 1>>${LOGFILE}
			;;
		"xz")
			xz -dc "${2}" | dd of="${3}" bs=${BLOCKSIZE} 2>>${LOGFILE} 1>>${LOGFILE}
			;;
		"bz2")
			bz2 -dc "${2}" | dd of="${3}" bs=${BLOCKSIZE} 2>>${LOGFILE} 1>>${LOGFILE}
			;;
		"raw")
			cat "${2}" | dd of="${3}" bs=${BLOCKSIZE} 2>>${LOGFILE} 1>>${LOGFILE}
			;;
	esac
}

initial_scan_image_folder() {
	mount_usb "${USBDEV}${SPL}${USBPART}" "${USBMNT}" 2>>${LOGFILE} 1>>${LOGFILE}
	for f in $(ls --sort=time -1 "${IMGROOTDIR}/"); do
		if [ -d "${IMGROOTDIR}/${f}" ] && [ -f "${IMGROOTDIR}/${f}/restore.txt" ]; then
			IMGNAME="${f}"
			IMGDIR="${IMGROOTDIR}/${IMGNAME}/images"
			SGDPART="${IMGROOTDIR}/${IMGNAME}/table/sgdisk.bin"
			TXTPART="${IMGROOTDIR}/${IMGNAME}/restore.txt"
			break;
		fi
	done;
	umount_dev "${USBDEV}${SPL}${USBPART}"
}

set_usb_dev() {
	USBDEV="${1}"
	if [ "$(echo "${USBDEV}" | /usr/bin/grep -c mmc)" == "1" ]; then
		SPL="p";
	else
		SPL="";
	fi
}

set_dest_dev() {
	DESTDEV="${1}"
	if [ "$(echo "${DESTDEV}" | /usr/bin/grep -c mmc)" == "1" ]; then
		PL="p";
		ISEMMC=1
	else
		PL="";
	fi
}

check_result() {
	if [ "${1}" -ne 0 ]; then
		ISERROR=1
		logd "Previous operation exited with error code ${1}"
	fi
}

restore_data() {
	IMGEXT=$(echo "${3}" | rev | cut -d'.' -f1 | rev)
	if [ "${IMGEXT}" == "win" ]; then
		WINTYPE=$(echo "${3}" | rev | cut -d'.' -f2 | rev)
		if [ "${WINTYPE}" == "emmc" ]; then
			logd "Restoring TWRP eMMC image to ${2}"
			progress_dialog "Restoring data" "Restoring TWRP eMMC image to ${2}" "${4}"
			MD5RES=$(verify_md5 "${IMGDIR}/${3}")
			if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
				write_image raw "${IMGDIR}/${3}" "${DESTDEV}${PL}${1}"
				check_result $?
			else
				ISERROR=1
			fi
		fi
		if [ "$WINTYPE" == "ext2" ] || [ "$WINTYPE" == "ext3" ] || [ "$WINTYPE" == "ext4" ]; then
			format_disk "${WINTYPE}" "${2}" "${DESTDEV}${PL}${1}"
			mkdir -p "${DESTMNT}" 2>>${LOGFILE} 1>>${LOGFILE}
			mount -t "${WINTYPE}" "${DESTDEV}${PL}${1}" ${DESTMNT}
			if [ -f "${IMGDIR}/${3}" ]; then
				ISGZ=$(file "${IMGDIR}/${3}" | /usr/bin/grep gzip -c)
				if [ "$ISGZ" == "1" ]; then
					logd "Restoring TWRP compressed ${WINTYPE} image to ${2}"
					progress_dialog "Restoring data" "Restoring TWRP compressed ${WINTYPE} image to ${2}" "${4}"
					RESTYPE=gz
				else
					logd "Restoring TWRP ${WINTYPE} image to ${2}"
					progress_dialog "Restoring data" "Restoring TWRP ${WINTYPE} image to ${2}" "${4}"
					RESTYPE=tar
				fi
				MD5RES=$(verify_md5 "${IMGDIR}/${3}")
				if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
					restore_tar $RESTYPE "${IMGDIR}/${3}"
					check_result $?
				else
					ISERROR=1
				fi
			elif [ -f "${IMGDIR}/${3}000" ]; then
				ISGZ=$(file "${IMGDIR}/${3}000" | /usr/bin/grep -c gzip)
				if [ "$ISGZ" == "1" ]; then
					logd "Restoring TWRP compressed split ${WINTYPE} image to ${2}"
					progress_dialog "Restoring data" "Restoring TWRP compressed split ${WINTYPE} image to ${2}" "${4}"
					RESTYPE=gz
				else
					logd "Restoring TWRP split ${WINTYPE} image to ${2}"
					progress_dialog "Restoring data" "Restoring TWRP split ${WINTYPE} image to {2}" "${4}"
					RESTYPE=tar
				fi
				for w in $(ls -1 ${IMGDIR}/${3}*); do
					if [ -f "${w}" ]; then
						EXT=$(echo "${w}" | rev | cut -d'.' -f1 | rev)
						if [ "$EXT" != "md5" ]; then
							WINFILESU="${WINFILESU} ${w}"
							MD5RES=$(verify_md5 "${w}" 1)
							if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
								WINFILES="${WINFILES} ${w}"
								if [ "${MD5RES}" == "1" ]; then
									WINFILESM="${WINFILESM} ${w}"
								fi
							fi
						fi
					fi
				done;
				if [ "$WINFILESM" != "$WINFILES" ]; then
					logd "[Good MD5] ${WINFILES}"
				elif [ "$WINFILESU" != "$WINFILES" ]; then
					ISERROR=1
					SKIPPART=1
					logd "[BAD MD5] ${WINFILES}"
				else
					logd "[No MD5] ${WINFILES}"
				fi
				if [ -z "$SKIPPART" ]; then
					ISGZ=$(file "${IMGDIR}/${3}000" | /usr/bin/grep -c gzip)
					restore_tar $RESTYPE "${WINFILES}"
					check_result $?
					logd "Syncronizing data to disk..."
					sync
				else
					ISERROR=1
				fi
				umount_dev "${DESTDEV}${PL}${1}"
			fi
		fi
	elif [ "$IMGEXT" == "xz" ]; then
		logd "Restoring xz compressed raw image to ${2}"
		progress_dialog "Restoring data" "Restoring xz compressed raw image to ${2}" "${4}"
		MD5RES=$(verify_md5 "${IMGDIR}/${3}")
		if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
			write_image xz "${IMGDIR}/${3}" "${DESTDEV}${PL}${3}"
			check_result $?
		else
			ISERROR=1
			logd "Partition ${1} Restore Failed (Backup File MD5 Error)"
		fi
	elif [ "$IMGEXT" == "gz" ]; then
		logd "Restoring gz compressed raw image to ${2}"
		progress_dialog "Restoring data" "Restoring gz compressed raw image to ${2}" "${4}"
		MD5RES=$(verify_md5 "${IMGDIR}/${3}")
		if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
			write_image gz "${IMGDIR}/${3}" "${DESTDEV}${PL}${1}"
			check_result $?
		else
			ISERROR=1
			logd "Partition ${1} Restore Failed (Backup File MD5 Error)"
		fi
	elif [ "$IMGEXT" == "bz2" ]; then
		logd "Restoring bz2 compressed raw image to ${2}"
		progress_dialog "Restoring data" "Restoring bz2 compressed raw image to ${2}" "${4}"
		MD5RES=$(verify_md5 "${IMGDIR}/${3}")
		if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
			write_image bz2 "${IMGDIR}/${3}" "${DESTDEV}${PL}${1}"
			check_result $?
		else
			ISERROR=1
			logd "Partition ${1} Restore Failed (Backup File MD5 Error)"
		fi
	elif [ "$IMGEXT" == "raw" ] || [ "$IMGEXT" == "img" ]; then
		logd "Restoring raw image to ${2}"
		progress_dialog "Restoring data" "Restoring raw image to ${2}" "${4}"
		MD5RES=$(verify_md5 "${IMGDIR}/${3}")
		if [ "${MD5RES}" == "1" ] || [ "${MD5RES}" == "2" ]; then
			write_image raw "${IMGDIR}/${3}" "${DESTDEV}${PL}${1}"
		else
			ISERROR=1
			logd "Partition ${1} Restore Failed (Backup File MD5 Error)"
		fi
	else
		log ""
		log "Unsupported image: ${3}"
		log "Please read the README"
		ISERROR=1
	fi
}
